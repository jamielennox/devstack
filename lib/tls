# lib/tls
# Functions to control the configuration and operation of the TLS proxy service

# !! source _before_ any services that use ``SERVICE_HOST``
#
# Dependencies:
#
# - ``functions`` file
# - ``DEST``, ``DATA_DIR`` must be defined
# - ``HOST_IP``, ``SERVICE_HOST``
# - ``KEYSTONE_TOKEN_FORMAT`` must be defined

# Entry points:
#
# - init_cert

# - configure_proxy
# - start_tls_proxy

# - stop_tls_proxy
# - cleanup_CA

# - start_tls_proxy HOST_IP 5000 localhost 5000
# - ensure_certificates
# - is_ssl_enabled_service
# - enable_mod_ssl

# Defaults
# --------

if is_service_enabled tls-proxy; then
    # TODO(dtroyer): revisit this below after the search for HOST_IP has been done
    TLS_IP=${TLS_IP:-$SERVICE_IP}
fi

DEVSTACK_HOSTNAME=$(hostname -f)
DEVSTACK_CERT_NAME=devstack-cert
DEVSTACK_CERT=$DATA_DIR/$DEVSTACK_CERT_NAME.pem

# CA configuration
CERT_DIR=${CERT_DIR:-$DATA_DIR/certs}

ORG_NAME="OpenStack"
ORG_UNIT_NAME="DevStack"

# Stud configuration
STUD_PROTO="--tls"
STUD_CIPHERS='TLSv1+HIGH:!DES:!aNULL:!eNULL:@STRENGTH'


# CA Functions
# ============

# initialize certificate handling
function init_cert {
    # Ensure CAs are built
    install_package certmonger

    start_service certmonger

    # Verify ``TLS_IP`` is good
    if [[ -n "$HOST_IP" && "$HOST_IP" != "$TLS_IP" ]]; then
        # auto-discover has changed the IP
        TLS_IP=$HOST_IP
    fi

    sudo getcert stop-tracking \
        -I $DEVSTACK_CERT_NAME \
        -k $CERT_DIR/$DEVSTACK_CERT_NAME.key \
        -f $CERT_DIR/$DEVSTACK_CERT_NAME.crt || true

    rm -f $CERT_DIR/ca.crt
    rm -f $CERT_DIR/$DEVSTACK_CERT_NAME.key
    rm -f $CERT_DIR/$DEVSTACK_CERT_NAME.crt

    mkdir -p $CERT_DIR

    sudo getcert request \
        -w -v \
        -c local \
        -I $DEVSTACK_CERT_NAME \
        -N "O=${ORG_NAME},OU=${ORG_UNIT_NAME} Servers,CN=${DEVSTACK_HOSTNAME}" \
        -D "${TLS_IP}" \
        -k $CERT_DIR/$DEVSTACK_CERT_NAME.key \
        -f $CERT_DIR/$DEVSTACK_CERT_NAME.crt \
        -F $CERT_DIR/ca.crt

    # update the system CAs to include the devstack certs
    if is_fedora; then
        sudo cp $CERT_DIR/ca.crt /usr/share/pki/ca-trust-source/anchors/devstack-ca.pem
        sudo update-ca-trust
    elif is_ubuntu; then
        sudo cp $CERT_DIR/ca.crt /usr/local/share/ca-certificates/devstack-ca.crt
        sudo update-ca-certificates
    fi

    sudo chown $STACK_USER $CERT_DIR/ca.crt $CERT_DIR/$DEVSTACK_CERT_NAME.key $CERT_DIR/$DEVSTACK_CERT_NAME.crt

    # write out the CA bundle as this gets used to verify connections
    cat $CERT_DIR/ca.crt >> $SSL_BUNDLE_FILE

    # Create a cert bundle
    cat $CERT_DIR/$DEVSTACK_CERT_NAME.key $CERT_DIR/$DEVSTACK_CERT_NAME.crt > $DEVSTACK_CERT
}

# Clean up the CA files
# cleanup_CA
function cleanup_CA {
    if is_fedora; then
        sudo rm -f /usr/share/pki/ca-trust-source/anchors/devstack-ca.pem
        sudo update-ca-trust
    elif is_ubuntu; then
        sudo rm -f /usr/local/share/ca-certificates/devstack-ca.crt
        sudo update-ca-certificates
    fi
}


# Certificate Input Configuration
# ===============================

# check to see if the service(s) specified are to be SSL enabled.
#
# Multiple services specified as arguments are ``OR``'ed together; the test
# is a short-circuit boolean, i.e it returns on the first match.
#
# Uses global ``SSL_ENABLED_SERVICES``
function is_ssl_enabled_service {
    local services=$@
    local service=""
    if [ "$USE_SSL" == "False" ]; then
        return 1
    fi
    for service in ${services}; do
        [[ ,${SSL_ENABLED_SERVICES}, =~ ,${service}, ]] && return 0
    done
    return 1
}


# Ensure that the certificates for a service are in place. This function does
# not check that a service is SSL enabled, this should already have been
# completed.
#
# The function expects to find a certificate, key and CA certificate in the
# variables {service}_SSL_CERT, {service}_SSL_KEY and {service}_SSL_CA. For
# example for keystone this would be KEYSTONE_SSL_CERT, KEYSTONE_SSL_KEY and
# KEYSTONE_SSL_CA.
#
# If it does not find these certificates then the devstack-issued server
# certificate, key and CA certificate will be associated with the service.
#
# If only some of the variables are provided then the function will quit.
function ensure_certificates {
    local service=$1

    local cert_var="${service}_SSL_CERT"
    local key_var="${service}_SSL_KEY"
    local ca_var="${service}_SSL_CA"

    local cert=${!cert_var}
    local key=${!key_var}
    local ca=${!ca_var}

    if [[ -z "$cert" && -z "$key" && -z "$ca" ]]; then
        local cert="$CERT_DIR/$DEVSTACK_CERT_NAME.crt"
        local key="$CERT_DIR/$DEVSTACK_CERT_NAME.key"
        local ca="$CERT_DIR/ca.crt"

        eval ${service}_SSL_CERT=\$cert
        eval ${service}_SSL_KEY=\$key
        eval ${service}_SSL_CA=\$ca
    elif [[ -z "$cert" || -z "$key" || -z "$ca" ]]; then
        die $LINENO "Missing either the ${cert_var} ${key_var} or ${ca_var}" \
                    "variable to enable SSL for ${service}"
    else
        cat $ca >> $SSL_BUNDLE_FILE
    fi
}

# Enable the mod_ssl plugin in Apache
function enable_mod_ssl {
    echo "Enabling mod_ssl"

    if is_ubuntu; then
        sudo a2enmod ssl
    elif is_fedora; then
        # Fedora enables mod_ssl by default
        :
    fi
    if ! sudo `which httpd || which apache2ctl` -M | grep -w -q ssl_module; then
        die $LINENO "mod_ssl is not enabled in apache2/httpd, please check for it manually and run stack.sh again"
    fi
}


# Proxy Functions
# ===============

# Starts the TLS proxy for the given IP/ports
# start_tls_proxy front-host front-port back-host back-port
function start_tls_proxy {
    local f_host=$1
    local f_port=$2
    local b_host=$3
    local b_port=$4

    stud $STUD_PROTO -f $f_host,$f_port -b $b_host,$b_port $DEVSTACK_CERT 2>/dev/null
}


# Cleanup Functions
# =================


# Stops all stud processes. This should be done only after all services
# using tls configuration are down.
function stop_tls_proxy {
    killall stud
}


# Remove CA along with configuration, as well as the local server certificate
function cleanup_CA {
    rm -rf "$DATA_DIR/CA" "$DEVSTACK_CERT"
}

# Tell emacs to use shell-script-mode
## Local variables:
## mode: shell-script
## End:
